{
  "sourceType" : "module",
  "body" : [ {
    "declaration" : {
      "id" : {
        "name" : "BoundaryNodeRule",
        "type" : "Identifier"
      },
      "body" : {
        "body" : [ {
          "key" : {
            "name" : "isInBoundary",
            "type" : "Identifier"
          },
          "value" : {
            "params" : [ {
              "name" : "boundaryCount",
              "type" : "Identifier"
            } ],
            "body" : {
              "body" : [ ],
              "type" : "BlockStatement"
            },
            "generator" : false,
            "type" : "FunctionExpression"
          },
          "kind" : "method",
          "computed" : false,
          "static" : false,
          "type" : "MethodDefinition"
        } ],
        "type" : "ClassBody"
      },
      "superClass" : null,
      "type" : "ClassDeclaration"
    },
    "type" : "ExportDefaultDeclaration"
  }, {
    "id" : {
      "name" : "Mod2BoundaryNodeRule",
      "type" : "Identifier"
    },
    "body" : {
      "body" : [ {
        "key" : {
          "name" : "isInBoundary",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ {
            "name" : "boundaryCount",
            "type" : "Identifier"
          } ],
          "body" : {
            "body" : [ {
              "argument" : {
                "operator" : "===",
                "left" : {
                  "operator" : "%",
                  "left" : {
                    "name" : "boundaryCount",
                    "type" : "Identifier"
                  },
                  "right" : {
                    "value" : "2",
                    "raw" : "2",
                    "type" : "Literal"
                  },
                  "type" : "BinaryExpression"
                },
                "right" : {
                  "value" : "1",
                  "raw" : "1",
                  "type" : "Literal"
                },
                "type" : "BinaryExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "method",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      }, {
        "key" : {
          "name" : "interfaces_",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ ],
          "body" : {
            "body" : [ {
              "argument" : {
                "elements" : [ {
                  "name" : "BoundaryNodeRule",
                  "type" : "Identifier"
                } ],
                "type" : "ArrayExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "get",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      } ],
      "type" : "ClassBody"
    },
    "superClass" : null,
    "type" : "ClassDeclaration"
  }, {
    "id" : {
      "name" : "EndPointBoundaryNodeRule",
      "type" : "Identifier"
    },
    "body" : {
      "body" : [ {
        "key" : {
          "name" : "isInBoundary",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ {
            "name" : "boundaryCount",
            "type" : "Identifier"
          } ],
          "body" : {
            "body" : [ {
              "argument" : {
                "operator" : ">",
                "left" : {
                  "name" : "boundaryCount",
                  "type" : "Identifier"
                },
                "right" : {
                  "value" : "0",
                  "raw" : "0",
                  "type" : "Literal"
                },
                "type" : "BinaryExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "method",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      }, {
        "key" : {
          "name" : "interfaces_",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ ],
          "body" : {
            "body" : [ {
              "argument" : {
                "elements" : [ {
                  "name" : "BoundaryNodeRule",
                  "type" : "Identifier"
                } ],
                "type" : "ArrayExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "get",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      } ],
      "type" : "ClassBody"
    },
    "superClass" : null,
    "type" : "ClassDeclaration"
  }, {
    "id" : {
      "name" : "MultiValentEndPointBoundaryNodeRule",
      "type" : "Identifier"
    },
    "body" : {
      "body" : [ {
        "key" : {
          "name" : "isInBoundary",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ {
            "name" : "boundaryCount",
            "type" : "Identifier"
          } ],
          "body" : {
            "body" : [ {
              "argument" : {
                "operator" : ">",
                "left" : {
                  "name" : "boundaryCount",
                  "type" : "Identifier"
                },
                "right" : {
                  "value" : "1",
                  "raw" : "1",
                  "type" : "Literal"
                },
                "type" : "BinaryExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "method",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      }, {
        "key" : {
          "name" : "interfaces_",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ ],
          "body" : {
            "body" : [ {
              "argument" : {
                "elements" : [ {
                  "name" : "BoundaryNodeRule",
                  "type" : "Identifier"
                } ],
                "type" : "ArrayExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "get",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      } ],
      "type" : "ClassBody"
    },
    "superClass" : null,
    "type" : "ClassDeclaration"
  }, {
    "id" : {
      "name" : "MonoValentEndPointBoundaryNodeRule",
      "type" : "Identifier"
    },
    "body" : {
      "body" : [ {
        "key" : {
          "name" : "isInBoundary",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ {
            "name" : "boundaryCount",
            "type" : "Identifier"
          } ],
          "body" : {
            "body" : [ {
              "argument" : {
                "operator" : "===",
                "left" : {
                  "name" : "boundaryCount",
                  "type" : "Identifier"
                },
                "right" : {
                  "value" : "1",
                  "raw" : "1",
                  "type" : "Literal"
                },
                "type" : "BinaryExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "method",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      }, {
        "key" : {
          "name" : "interfaces_",
          "type" : "Identifier"
        },
        "value" : {
          "params" : [ ],
          "body" : {
            "body" : [ {
              "argument" : {
                "elements" : [ {
                  "name" : "BoundaryNodeRule",
                  "type" : "Identifier"
                } ],
                "type" : "ArrayExpression"
              },
              "type" : "ReturnStatement"
            } ],
            "type" : "BlockStatement"
          },
          "generator" : false,
          "type" : "FunctionExpression"
        },
        "kind" : "get",
        "computed" : false,
        "static" : false,
        "type" : "MethodDefinition"
      } ],
      "type" : "ClassBody"
    },
    "superClass" : null,
    "type" : "ClassDeclaration"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "Mod2BoundaryNodeRule",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "name" : "Mod2BoundaryNodeRule",
        "type" : "Identifier"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "EndPointBoundaryNodeRule",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "name" : "EndPointBoundaryNodeRule",
        "type" : "Identifier"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "MultiValentEndPointBoundaryNodeRule",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "name" : "MultiValentEndPointBoundaryNodeRule",
        "type" : "Identifier"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "MonoValentEndPointBoundaryNodeRule",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "name" : "MonoValentEndPointBoundaryNodeRule",
        "type" : "Identifier"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "MOD2_BOUNDARY_RULE",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "callee" : {
          "name" : "Mod2BoundaryNodeRule",
          "type" : "Identifier"
        },
        "arguments" : [ ],
        "type" : "NewExpression"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "ENDPOINT_BOUNDARY_RULE",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "callee" : {
          "name" : "EndPointBoundaryNodeRule",
          "type" : "Identifier"
        },
        "arguments" : [ ],
        "type" : "NewExpression"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "MULTIVALENT_ENDPOINT_BOUNDARY_RULE",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "callee" : {
          "name" : "MultiValentEndPointBoundaryNodeRule",
          "type" : "Identifier"
        },
        "arguments" : [ ],
        "type" : "NewExpression"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "MONOVALENT_ENDPOINT_BOUNDARY_RULE",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "callee" : {
          "name" : "MonoValentEndPointBoundaryNodeRule",
          "type" : "Identifier"
        },
        "arguments" : [ ],
        "type" : "NewExpression"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  }, {
    "expression" : {
      "operator" : "=",
      "left" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "OGC_SFS_BOUNDARY_RULE",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "right" : {
        "object" : {
          "name" : "BoundaryNodeRule",
          "type" : "Identifier"
        },
        "property" : {
          "name" : "MOD2_BOUNDARY_RULE",
          "type" : "Identifier"
        },
        "computed" : false,
        "type" : "MemberExpression"
      },
      "type" : "AssignmentExpression"
    },
    "type" : "ExpressionStatement"
  } ],
  "type" : "Program"
}